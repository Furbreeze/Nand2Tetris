// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory, freelist;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freelist = 2048;
        let freelist[0] = 14334;
        let freelist[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int addr, block;
        let addr = freelist;

        while (~(memory[addr] > size)) {
            let addr = memory[addr + 1];
        }

        let block = (addr + memory[addr]) - size; // 16378
        let block[-1] = size + 1; // mem[16377] = 6
        let memory[addr] = memory[addr] - (size + 1); // 14329
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int segment, addr, len;
        let addr = freelist;
        let segment = o - 1;
        let segment[0] = o[-1];

        while(~(memory[addr + 1] = null)) {
            let addr = memory[addr + 1];
        }

        let memory[addr + 1] = segment;
        let segment[1] = null;
        return;
    }    
}
