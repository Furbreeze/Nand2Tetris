// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, max;
    field Array self;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        var int addr;
        let max = maxLength;
        let length = 0;
        if (max > 0) {
            let addr = Memory.alloc(max);
            let self = addr;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j<0) | (j>(length-1)) | (j>(max-1))){
            do Sys.error(15);
        }

        return self[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > (max - 1))) {
            do Sys.error(16);
        }

        let self[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = max) {
            do Sys.error(17);
        }

        let self[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18);
        }
        let length = length - 1;
        let self[length] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int y, d, v;
        var boolean isNeg;
        let y = 0;
        let v = 0;
        let d = 0;
        let isNeg = false;

        if (self[y] = 45) {
            let isNeg = true;
            let y = 1;
        }

        while (y < length) {
            if ((self[y] > 47) & (self[y] < 58)){
                let d = self[y] - 48;
                let v = (v * 10) + d;
            }
            else {
                let y = length;
            }

            let y = y + 1;
        }

        if (isNeg) {
            return -v;
        }

        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int nn, count;
        var char c;
        var Array temp;

        let temp = Array.new(5);

        while (length > 0) {
            do eraseLastChar();
        }

        let nn = Math.abs(val);
        let c = ((nn - (10 * (nn/10))) + 48);
        let count = 0;

        while (nn > 9) {
            let temp[count] = c;
            let nn = nn / 10;
            let c = ((nn - (10 * (nn/10))) + 48);
            let count = count + 1;
        }

        let temp[count] = c;

        if (val < 0) {
            do appendChar(45);
        }

        while (count > -1) {
            do appendChar(temp[count]);
            let count = count - 1;
        }

        do Memory.deAlloc(temp);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
